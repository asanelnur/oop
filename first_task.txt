//TestFirstTask.java :

import java.math.BigDecimal;

public class TestFirstTask {
    public static void main(String[] args) {
        Client client=new Client("Donny","+777777777777","001226678543");

        Account regAcc = new RegularAccount("4400********1110", "1", client, new BigDecimal("10000.00"));
		Account premAcc = new PremiumAccount("4400********1110", "1", client, new BigDecimal("10000.00"));
		Account goldenAcc = new GoldenAccount("4400********1110", "1", client, new BigDecimal("10000.00"));

        Device device1=new ATM();
        device1.withdraw(regAcc,new BigDecimal("100000"));
        System.out.println(regAcc.getBalance());

        device1.deposit(premAcc,new BigDecimal("5000"));
        System.out.println(premAcc.getBalance());

        Device device2=new Smartphone();
        device2.withdraw(goldenAcc,new BigDecimal("200000"));
        System.out.println(goldenAcc.getBalance());
    }
}





//Account.java:


import java.math.BigDecimal;
import java.util.ArrayList;

public abstract class Account {
	protected String number;
	protected String status;
	protected Client ownerName;
	protected BigDecimal balance;
	protected ArrayList<Operation> operations=new ArrayList<Operation>();

	public Account(String number, String status, Client owner, BigDecimal balance){
		this.number = number;
		if (status == null || !"1".equals(status) && !"2".equals(status)) {
			throw new IllegalArgumentException("Invalid status!");
		}
		this.status = status;
		this.ownerName = new Client(owner.getName(), owner.getPhone(), owner.getId());
		this.balance = balance;
	}

        public String getNumber() {
		return number;
	}

        public String getStatus() {
		return status;
	}

	public Client getOwner() {
		System.out.println("Inside bankaccount " + ownerName.getName());
		return new Client(ownerName.getName(), ownerName.getPhone(), ownerName.getId());
	}

	public void setStatus(String status) {
		if (status == null || !"1".equals(status) && !"2".equals(status)) {
			throw new IllegalArgumentException("Invalid status!");
		}
		this.status = status;
	}

	public String getBalance() {
		return balanceBuilder();
	}

	protected abstract String balanceBuilder();

	public abstract void credit(BigDecimal amount);

	public abstract void debit(BigDecimal amount);

	public abstract void paymentForService();

	public abstract void getStatement();
	
}




//Client.java :

public class Client {
    private String name;
    private String phone;
    private String ID;

    public Client(String name, String phone, String ID) {
	this.name = name;
	this.phone = phone;
	this.ID = ID;
    }

    public String getName() {
	return name;
    }

    public String getPhone() {
	return phone;
    }
    
    public String getId() {
	return ID;
    }
}





//RegularAccount.java :

import java.math.BigDecimal;

public class RegularAccount extends Account {
	public RegularAccount(String number, String status, Client owner, BigDecimal balance) {
		super(number, status, owner, balance);
	}

        @Override
	public void credit(BigDecimal amount){
		balance = balance.add(amount);
		operations.add(new Operation("Credit",amount));
	}

	@Override
	public void debit(BigDecimal amount) {
		BigDecimal newBalance = balance.subtract(amount);

		if (newBalance.compareTo(BigDecimal.ZERO) < 0) {
			throw new IllegalArgumentException("balance can not be negative");
		}

		newBalance = newBalance.subtract(new BigDecimal("30.00"));

		if (newBalance.compareTo(BigDecimal.ZERO) < 0) {
			throw new IllegalArgumentException("balance can not be negative");
		}

		balance = newBalance;

		operations.add(new Operation("Debit",amount));
	}

	@Override
	public void paymentForService() {
		balance = balance.subtract(new BigDecimal("4000.00"));
	}

	@Override
	protected String balanceBuilder() {
		return "@@@@ Your regular account balance is " + balance.toString() + "@@@@";
	}

	@Override
	public void getStatement() {
		StringBuilder s = new StringBuilder();
		for (Operation operation : operations) {
			if (operation == null) {
				break;
			}
			s.append(operation).append("\n");
		}
		System.out.println(s);
	}
}



//PremiumAccount.java :

import java.math.BigDecimal;

public class PremiumAccount extends Account {
	public PremiumAccount(String number, String status, Client owner, BigDecimal balance) {
		super(number, status, owner, balance);
	}

	@Override
	public void credit(BigDecimal amount){
		balance = balance.add(amount);
		operations.add(new Operation("Credit",amount));
	}

	@Override
	public void debit(BigDecimal amount) {
		BigDecimal newBalance = balance.subtract(amount);

		if (newBalance.compareTo(BigDecimal.ZERO) < 0) {
			throw new IllegalArgumentException("balance can not be negative");
		}

		newBalance = newBalance.add(new BigDecimal("150.00"));

		balance = newBalance;

		operations.add(new Operation("Debit",amount));
	}


	@Override
	public void paymentForService() {
		balance = balance.subtract(new BigDecimal("4000.00"));
	}

	@Override
	protected String balanceBuilder() {
		return "@@@@ Your premium account balance is " + balance.toString() + "@@@@";
	}

	@Override
	public void getStatement() {
		StringBuilder s = new StringBuilder();
		for (Operation operation : operations) {
			if (operation == null) {
				break;
			}
			s.append(operation).append("\n");
		}
		System.out.println(s);
	}
}




//GoldenAccount.java :

import java.math.BigDecimal;

public class GoldenAccount extends Account {
	public GoldenAccount(String number, String status, Client owner, BigDecimal balance) {
		super(number, status, owner, balance);
	}

	@Override
	public void credit(BigDecimal amount){
		balance = balance.add(amount);
		operations.add(new Operation("Credit",amount));
	}
	@Override
	public void debit(BigDecimal amount) {
		BigDecimal newBalance = balance.subtract(amount);

		if (newBalance.compareTo(BigDecimal.ZERO) < 0) {
			throw new IllegalArgumentException("balance can not be negative");
		}

		newBalance = newBalance.add(new BigDecimal("100.00"));

		balance = newBalance;

		operations.add(new Operation("Debit",amount));
	}


	@Override
	public void paymentForService() {
		balance = balance.subtract(new BigDecimal("3000.00"));
	}

	@Override
	protected String balanceBuilder() {
		return "**** Your golden account balance is " + balance.toString() + "****";
	}

	@Override
	public void getStatement() {
		StringBuilder s = new StringBuilder();
		for (Operation operation : operations) {
			if (operation == null) {
				break;
			}
			s.append(operation).append("\n");
		}
		System.out.println(s);
	}
}



//Operation.java :

import java.math.*;

public class Operation {
    private String operationType;
    private BigDecimal amount;
    private java.util.Date time;

    public Operation(String operationType,BigDecimal amount){
        this.operationType=operationType;
        this.amount=amount;
        time=new java.util.Date();
    }

    public String toString(){
        return "Operation type: "+operationType+"\namount: "+amount+"and created on: "+time;
    }
}



//Device.java :

import java.math.BigDecimal;

public interface Device {
    public abstract void withdraw(Account account,BigDecimal amount);
    public abstract void deposit(Account account,BigDecimal amount);
    public abstract void getBalance();
    public abstract void getStatement();
}





//ATM.java :

import java.math.BigDecimal;

public class ATM implements Device{
    @Override
    public void withdraw(Account account,BigDecimal amount){
        account.credit(amount);
    }
    @Override
    public void deposit(Account account,BigDecimal amount){
        account.debit(amount);
    }
    @Override
    public void getBalance(){
        getBalance();
    }
    @Override
    public void getStatement(){
        getStatement();
    }
}




//Smartphone.java :

import java.math.BigDecimal;

public class Smartphone implements Device{
    @Override
    public void withdraw(Account account,BigDecimal amount){
        account.credit(amount);
    }
    @Override
    public void deposit(Account account,BigDecimal amount){
        account.debit(amount);
    }
    @Override
    public void getBalance(){
        getBalance();
    }
    @Override
    public void getStatement(){
        getStatement();
    }
}